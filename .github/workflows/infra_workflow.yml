# This is the workflow for Infrastructure
name: Infra Workflow

# Controls when the workflow will run
on:
  # Triggers the workflow pull request events but only for the "main" branch
  pull_request:
    branches: ["main"]
    paths:
      - jarvis-infra/**
  # Triggers the workflow push events but only for the "main" branch
  push:
    branches: ["main"]
    paths:
      - jarvis-infra/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform Action"
        required: true
        default: "deploy"
        type: choice
        options:
          - deploy
          - destroy
      stage:
        description: "Infra Stage"
        required: true
        default: "planning"
        type: choice
        options:
          - planning
          - execution

permissions: read-all

jobs:
  planning:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' && github.event.inputs.stage == 'planning' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Codebase
        uses: actions/checkout@v4
      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        working-directory: ./jarvis-infra
        run: |
          terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP" -backend-config="key=project-jarvis-dev.tfstate"

      # Run a terraform deploy plan for pull requests only
      - name: Terraform Deploy Plan
        id: plan
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        working-directory: ./jarvis-infra
        run: terraform plan -no-color --var-file=dev.tfvars

      # Run a terraform destroy plan if input says so
      - name: Terraform Destroy Plan
        id: destroy
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        working-directory: ./jarvis-infra
        run: terraform plan -destroy --var-file=dev.tfvars

  deployment:
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' && github.event.inputs.stage == 'execution' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Codebase
        uses: actions/checkout@v4
      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        working-directory: ./jarvis-infra
        run: |
          terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP" -backend-config="key=project-jarvis-dev.tfstate"

      # Run a terraform apply for push
      - name: Terraform Deploy
        id: apply
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        working-directory: ./jarvis-infra
        run: terraform apply --var-file=dev.tfvars -auto-approve

      # Run a terraform destroy if input says so
      - name: Terraform Destroy
        id: destroy
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        working-directory: ./jarvis-infra
        run: terraform destroy --var-file=dev.tfvars -auto-approve
